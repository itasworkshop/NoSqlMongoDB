CRUD Operations

Create, Read, Update and Delete

Storing data
1 save()
2 insert()
3 insertOne()
4 insertMany()

> db.emp2.insertMany([{y:1},{x:2}]);
{
        "acknowledged" : true,
        "insertedIds" : [
                ObjectId("61b03418be11ba52706181f5"),
                ObjectId("61b03418be11ba52706181f6")
        ]
}
> db.emp2.find()
{ "_id" : ObjectId("61b03418be11ba52706181f5"), "y" : 1 }
{ "_id" : ObjectId("61b03418be11ba52706181f6"), "x" : 2 }


2 Read
1 db.mycoll.find()






3 Update 
1 save()
2 update()
3 updateMany()

> db.mynewcoll.find()
{ "_id" : ObjectId("61b02b9fbe11ba52706181f2"), "x" : 1 }
{ "_id" : ObjectId("61b03677be11ba52706181f7"), "y" : 1 }
{ "_id" : ObjectId("61b03677be11ba52706181f8"), "x" : 2 }
> db.mynewcoll.update({x:2},{$set:{x:10}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.mynewcoll.find()
{ "_id" : ObjectId("61b02b9fbe11ba52706181f2"), "x" : 1 }
{ "_id" : ObjectId("61b03677be11ba52706181f7"), "y" : 1 }
{ "_id" : ObjectId("61b03677be11ba52706181f8"), "x" : 10 }
> db.mynewcoll.update({x:1},{$set:{y:10}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.mynewcoll.find()
{ "_id" : ObjectId("61b02b9fbe11ba52706181f2"), "x" : 1, "y" : 10 }
{ "_id" : ObjectId("61b03677be11ba52706181f7"), "y" : 1 }
{ "_id" : ObjectId("61b03677be11ba52706181f8"), "x" : 10 }
> db.mynewcoll.update({x:1},{$set:{y:50}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.mynewcoll.find()
{ "_id" : ObjectId("61b02b9fbe11ba52706181f2"), "x" : 1, "y" : 50 }
{ "_id" : ObjectId("61b03677be11ba52706181f7"), "y" : 1 }
{ "_id" : ObjectId("61b03677be11ba52706181f8"), "x" : 10 }
>

Can we update _id?
No
if we need create same document with new _id and delete the existing one.

updateOne vs updateMany()
by default top most document is modified while updateMany() modifies all matching records in collection.

> db.mynewcoll.find()
{ "_id" : ObjectId("61b02b9fbe11ba52706181f2"), "x" : 1 }
{ "_id" : ObjectId("61b03677be11ba52706181f7"), "y" : 1 }
{ "_id" : ObjectId("61b03677be11ba52706181f8"), "x" : 2 }
> db.mynewcoll.update({x:2},{$set:{x:10}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.mynewcoll.find()
{ "_id" : ObjectId("61b02b9fbe11ba52706181f2"), "x" : 1 }
{ "_id" : ObjectId("61b03677be11ba52706181f7"), "y" : 1 }
{ "_id" : ObjectId("61b03677be11ba52706181f8"), "x" : 10 }
> db.mynewcoll.update({x:1},{$set:{y:10}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.mynewcoll.find()
{ "_id" : ObjectId("61b02b9fbe11ba52706181f2"), "x" : 1, "y" : 10 }
{ "_id" : ObjectId("61b03677be11ba52706181f7"), "y" : 1 }
{ "_id" : ObjectId("61b03677be11ba52706181f8"), "x" : 10 }
> db.mynewcoll.update({x:1},{$set:{y:50}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.mynewcoll.find()
{ "_id" : ObjectId("61b02b9fbe11ba52706181f2"), "x" : 1, "y" : 50 }
{ "_id" : ObjectId("61b03677be11ba52706181f7"), "y" : 1 }
{ "_id" : ObjectId("61b03677be11ba52706181f8"), "x" : 10 }
> db.mynewcoll.insertMany([{y:1},{x:2}]);
{
        "acknowledged" : true,
        "insertedIds" : [
                ObjectId("61b0398dbe11ba52706181f9"),
                ObjectId("61b0398dbe11ba52706181fa")
        ]
}
> db.mynewcoll.find()
{ "_id" : ObjectId("61b02b9fbe11ba52706181f2"), "x" : 1, "y" : 50 }
{ "_id" : ObjectId("61b03677be11ba52706181f7"), "y" : 1 }
{ "_id" : ObjectId("61b03677be11ba52706181f8"), "x" : 10 }
{ "_id" : ObjectId("61b0398dbe11ba52706181f9"), "y" : 1 }
{ "_id" : ObjectId("61b0398dbe11ba52706181fa"), "x" : 2 }
> db.mynewcoll.insertMany([{y:1},{x:2}]);
{
        "acknowledged" : true,
        "insertedIds" : [
                ObjectId("61b0399cbe11ba52706181fb"),
                ObjectId("61b0399cbe11ba52706181fc")
        ]
}
> db.mynewcoll.find()
{ "_id" : ObjectId("61b02b9fbe11ba52706181f2"), "x" : 1, "y" : 50 }
{ "_id" : ObjectId("61b03677be11ba52706181f7"), "y" : 1 }
{ "_id" : ObjectId("61b03677be11ba52706181f8"), "x" : 10 }
{ "_id" : ObjectId("61b0398dbe11ba52706181f9"), "y" : 1 }
{ "_id" : ObjectId("61b0398dbe11ba52706181fa"), "x" : 2 }
{ "_id" : ObjectId("61b0399cbe11ba52706181fb"), "y" : 1 }
{ "_id" : ObjectId("61b0399cbe11ba52706181fc"), "x" : 2 }
> db.mynewcoll.update({x:2},{$set:{x:30}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.mynewcoll.find()
{ "_id" : ObjectId("61b02b9fbe11ba52706181f2"), "x" : 1, "y" : 50 }
{ "_id" : ObjectId("61b03677be11ba52706181f7"), "y" : 1 }
{ "_id" : ObjectId("61b03677be11ba52706181f8"), "x" : 10 }
{ "_id" : ObjectId("61b0398dbe11ba52706181f9"), "y" : 1 }
{ "_id" : ObjectId("61b0398dbe11ba52706181fa"), "x" : 30 }
{ "_id" : ObjectId("61b0399cbe11ba52706181fb"), "y" : 1 }
{ "_id" : ObjectId("61b0399cbe11ba52706181fc"), "x" : 2 }
> db.mynewcoll.insertMany([{y:1},{x:2}]);
{
        "acknowledged" : true,
        "insertedIds" : [
                ObjectId("61b039f5be11ba52706181fd"),
                ObjectId("61b039f5be11ba52706181fe")
        ]
}
> db.mynewcoll.find()
{ "_id" : ObjectId("61b02b9fbe11ba52706181f2"), "x" : 1, "y" : 50 }
{ "_id" : ObjectId("61b03677be11ba52706181f7"), "y" : 1 }
{ "_id" : ObjectId("61b03677be11ba52706181f8"), "x" : 10 }
{ "_id" : ObjectId("61b0398dbe11ba52706181f9"), "y" : 1 }
{ "_id" : ObjectId("61b0398dbe11ba52706181fa"), "x" : 30 }
{ "_id" : ObjectId("61b0399cbe11ba52706181fb"), "y" : 1 }
{ "_id" : ObjectId("61b0399cbe11ba52706181fc"), "x" : 2 }
{ "_id" : ObjectId("61b039f5be11ba52706181fd"), "y" : 1 }
{ "_id" : ObjectId("61b039f5be11ba52706181fe"), "x" : 2 }
> db.mynewcoll.updateMany({x:2},{$set:{x:30}});
{ "acknowledged" : true, "matchedCount" : 2, "modifiedCount" : 2 }
> db.mynewcoll.find()
{ "_id" : ObjectId("61b02b9fbe11ba52706181f2"), "x" : 1, "y" : 50 }
{ "_id" : ObjectId("61b03677be11ba52706181f7"), "y" : 1 }
{ "_id" : ObjectId("61b03677be11ba52706181f8"), "x" : 10 }
{ "_id" : ObjectId("61b0398dbe11ba52706181f9"), "y" : 1 }
{ "_id" : ObjectId("61b0398dbe11ba52706181fa"), "x" : 30 }
{ "_id" : ObjectId("61b0399cbe11ba52706181fb"), "y" : 1 }
{ "_id" : ObjectId("61b0399cbe11ba52706181fc"), "x" : 30 }
{ "_id" : ObjectId("61b039f5be11ba52706181fd"), "y" : 1 }
{ "_id" : ObjectId("61b039f5be11ba52706181fe"), "x" : 30 }
> db.mynewcoll.insertMany([{y:1},{x:1}]);
{
        "acknowledged" : true,
        "insertedIds" : [
                ObjectId("61b03aa7be11ba52706181ff"),
                ObjectId("61b03aa7be11ba5270618200")
        ]
}
> db.mynewcoll.find()
{ "_id" : ObjectId("61b02b9fbe11ba52706181f2"), "x" : 1, "y" : 50 }
{ "_id" : ObjectId("61b03677be11ba52706181f7"), "y" : 1 }
{ "_id" : ObjectId("61b03677be11ba52706181f8"), "x" : 10 }
{ "_id" : ObjectId("61b0398dbe11ba52706181f9"), "y" : 1 }
{ "_id" : ObjectId("61b0398dbe11ba52706181fa"), "x" : 30 }
{ "_id" : ObjectId("61b0399cbe11ba52706181fb"), "y" : 1 }
{ "_id" : ObjectId("61b0399cbe11ba52706181fc"), "x" : 30 }
{ "_id" : ObjectId("61b039f5be11ba52706181fd"), "y" : 1 }
{ "_id" : ObjectId("61b039f5be11ba52706181fe"), "x" : 30 }
{ "_id" : ObjectId("61b03aa7be11ba52706181ff"), "y" : 1 }
{ "_id" : ObjectId("61b03aa7be11ba5270618200"), "x" : 1 }
> db.mynewcoll.update({x:1},{$set:{z:30}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.mynewcoll.find()
{ "_id" : ObjectId("61b02b9fbe11ba52706181f2"), "x" : 1, "y" : 50, "z" : 30 }
{ "_id" : ObjectId("61b03677be11ba52706181f7"), "y" : 1 }
{ "_id" : ObjectId("61b03677be11ba52706181f8"), "x" : 10 }
{ "_id" : ObjectId("61b0398dbe11ba52706181f9"), "y" : 1 }
{ "_id" : ObjectId("61b0398dbe11ba52706181fa"), "x" : 30 }
{ "_id" : ObjectId("61b0399cbe11ba52706181fb"), "y" : 1 }
{ "_id" : ObjectId("61b0399cbe11ba52706181fc"), "x" : 30 }
{ "_id" : ObjectId("61b039f5be11ba52706181fd"), "y" : 1 }
{ "_id" : ObjectId("61b039f5be11ba52706181fe"), "x" : 30 }
{ "_id" : ObjectId("61b03aa7be11ba52706181ff"), "y" : 1 }
{ "_id" : ObjectId("61b03aa7be11ba5270618200"), "x" : 1 }
>


3 updateOne()
4 updateMany()
5 replaceOne()
replaces entire document based on filter match --> no atomic operation

> db.mynewcoll.find()
{ "_id" : ObjectId("61b02ac6be11ba52706181f0"), "x" : 1 }
{ "_id" : ObjectId("61b02b31be11ba52706181f1"), "x" : 1 }
> db.mynewcoll.updateOne({x:1},{$set:{y:30}});
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }
> db.mynewcoll.find()
{ "_id" : ObjectId("61b02ac6be11ba52706181f0"), "x" : 1, "y" : 30 }
{ "_id" : ObjectId("61b02b31be11ba52706181f1"), "x" : 1 }
> db.mynewcoll.replace({x:1},{$set:{z:30}});
uncaught exception: TypeError: db.mynewcoll.replace is not a function :
@(shell):1:1
> db.mynewcoll.replaceOne({x:1},{$set:{z:30}});
uncaught exception: Error: the replace operation document must not contain atomic operators :
DBCollection.prototype.replaceOne@src/mongo/shell/crud_api.js:480:15
@(shell):1:1
> db.mynewcoll.replaceOne({x:1},{z:30});
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }
> db.mynewcoll.find()
{ "_id" : ObjectId("61b02ac6be11ba52706181f0"), "z" : 30 }
{ "_id" : ObjectId("61b02b31be11ba52706181f1"), "x" : 1 }
> db.mynewcoll.replaceOne({x:1},{name:"Rajesh",t:30,sub:[1,2,3]});
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }
> db.mynewcoll.find()
{ "_id" : ObjectId("61b02ac6be11ba52706181f0"), "z" : 30 }
{ "_id" : ObjectId("61b02b31be11ba52706181f1"), "name" : "Rajesh", "t" : 30, "sub" : [ 1, 2, 3 ] }
>

4 Delete Operation
deleteOne() and deleteMany() - for one record of satisfying filter and deleteMany for all the documents satisfying filter.

Note: if you don't specify filter --> error
empty filter db.mycoll.deleteOne({})

> db.mynewcoll.find()
{ "_id" : ObjectId("61b03677be11ba52706181f8"), "x" : 10 }
{ "_id" : ObjectId("61b03de0be11ba5270618201"), "y" : 1 }
{ "_id" : ObjectId("61b03de0be11ba5270618202"), "x" : 1 }
{ "_id" : ObjectId("61b03de2be11ba5270618203"), "y" : 1 }
{ "_id" : ObjectId("61b03de2be11ba5270618204"), "x" : 1 }
> db.mynewcoll.deleteMany({})

How to delete all the records in mongodb collection?
Ans: delete option without condition
deleteMany() option with empty filter

deleteMany({}) --> It will delete all the records in collection

> db.mynewcoll.find()
{ "_id" : ObjectId("61b03677be11ba52706181f8"), "x" : 10 }
{ "_id" : ObjectId("61b03de0be11ba5270618201"), "y" : 1 }
{ "_id" : ObjectId("61b03de0be11ba5270618202"), "x" : 1 }
{ "_id" : ObjectId("61b03de2be11ba5270618203"), "y" : 1 }
{ "_id" : ObjectId("61b03de2be11ba5270618204"), "x" : 1 }
> db.mynewcoll.deleteMany({})
{ "acknowledged" : true, "deletedCount" : 5 }
> db.mynewcoll.find()
> db.mynewcoll.insertMany([{y:1},{x:1}]);
{
        "acknowledged" : true,
        "insertedIds" : [
                ObjectId("61b03e4ebe11ba5270618205"),
                ObjectId("61b03e4ebe11ba5270618206")
        ]
}
> db.mynewcoll.insertMany([{y:1},{x:1}]);
{
        "acknowledged" : true,
        "insertedIds" : [
                ObjectId("61b03e50be11ba5270618207"),
                ObjectId("61b03e50be11ba5270618208")
        ]
}
> db.mynewcoll.find()
{ "_id" : ObjectId("61b03e4ebe11ba5270618205"), "y" : 1 }
{ "_id" : ObjectId("61b03e4ebe11ba5270618206"), "x" : 1 }
{ "_id" : ObjectId("61b03e50be11ba5270618207"), "y" : 1 }
{ "_id" : ObjectId("61b03e50be11ba5270618208"), "x" : 1 }
> db.mynewcoll.deleteOne({})
{ "acknowledged" : true, "deletedCount" : 1 }
> db.mynewcoll.find()
{ "_id" : ObjectId("61b03e4ebe11ba5270618206"), "x" : 1 }
{ "_id" : ObjectId("61b03e50be11ba5270618207"), "y" : 1 }
{ "_id" : ObjectId("61b03e50be11ba5270618208"), "x" : 1 }
>

Drop
for dropping the collection
> show collections
emp
emp2
mynewcoll
system.buckets.weather
system.views
weather
> db.emp2.find()
{ "_id" : ObjectId("61b03418be11ba52706181f5"), "y" : 1 }
{ "_id" : ObjectId("61b03418be11ba52706181f6"), "x" : 10 }
> db.emp2.drop()
true
> show collections
emp
mynewcoll
system.buckets.weather
system.views
weather
>

For dropping database
db.dropDatabase() --> no option just drops current used database.

> db.dropDatabase()
{ "ok" : 1 }
> show dbs;
HR       0.000GB
admin    0.000GB
config   0.000GB
local    0.000GB
praveen  0.000GB
test     0.000GB
>


















